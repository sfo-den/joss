<p class="lead">
  Firstly, thank you so much for agreeing to review for the Journal of Open Source Software (JOSS),
  we're delighted to have your help. This document is designed to outline our editorial guidelines
  and help you understand our requirements for accepting a submission into the JOSS. Our review
  process is based on a tried-and-tested approach of the
  <a href="http://ropensci.org/blog/2016/03/28/software-review" target="_blank">rOpenSci collaboration</a>.
</p>

<h2>Some guiding principles for you the reviewer</h2>

<p>
  We like to think of JOSS as a 'developer friendly' journal. That is, if the submitting authors
  have followed best practices (have documentation, tests, continuous integration, and a license)
  then their review should be extremely rapid.
</p>

<p>
  For those authors that don't quite meet the bar, please try to give clear feedback on how they
  could improve their submission. A key goal of JOSS is to raise the quality of research software
  generally and you (the experienced reviewer) are well placed to give this feedback.
</p>

<p>
  We encourage reviewers to file issues against the
  <a href="#author_guidelines">submitted repository</a>'s issue tracker. Include in your review
  links to any new issues that you the reviewer believe to be impeding the acceptance of the
  repository. (If the submitted repository is a GitHub repository, mentioning the review issue URL
  in the submitted repository's issue tracker will create a mention in the review issue's history.)
</p>

<h2>The JOSS paper</h2>

<p>The JOSS paper (the PDF associated with this submission) should only include:</p>

<ul>
  <li>A list of the authors of the software</li>
  <li>Author affiliations</li>
  <li>A short summary describing the high-level functionality of the software</li>
  <li>A list of key references including a link to the software archive</li>
</ul>

<p>
  Note the paper should <em>not</em> include software documentation such as API (Application
  Programming Interface) functionality, as this should be outlined in the software documentation.
</p>

<h2>Software license</h2>

<p>
  There should be an
  <a href="https://opensource.org/licenses/alphabetical" target="_blank">OSI approved</a> license
  included in the repository. Common licenses such as those listed on
  <a href="http://choosealicense.com" target="_blank">http://choosealicense.com</a> are preferred.
  Note there should be an actual license file present in the repository not just a reference to the
  license.
</p>

<blockquote>
  <p>
    Acceptable: A plain-text LICENSE file with the contents of an OSI approved license<br />
    Not acceptable: A phrase such as 'MIT license' in a README file
  </p>
</blockquote>

<h2>Documentation</h2>

<p>
  There should be sufficient documentation for you, the reviewer to understand the core
  functionality of the software under review. A high-level overview of this documentation should be
  included in a README file (or equivalent). There should be:
</p>

<h3>A statement of need</h3 >

<p>
  The authors should clearly state what problems the software is designed to solve and who the
  target audience is.
</p>

<h3>Installation instructions</h3>

<p>
  There should be a clearly-stated list of dependencies. Ideally these should be handled with an
  automated package management solution.
</p>

<blockquote>
  <p>
    Good: A package management file such as a <code>Gemfile</code> or <code>package.json</code> or
    equivalent<br />
    OK: A list of dependencies to install<br />
    Bad (not acceptable): Reliance on other software not listed by the authors
  </p>
</blockquote>

<h3>Example usage</h3>

<p>
  The authors should include examples of how to use the software (ideally to solve real-world
  analysis problems).
</p>

<h3>API documentation</h3>

<p>
  Reviewers should check that the software API is documented to a suitable level. This decision is
  left largely to the discretion of the reviewer and their experience of evaluating the software.
</p>

<blockquote>
  <p>
    Good: All functions/methods are documented including example inputs and outputs<br />
    OK: Core API functionality is documented<br />
    Bad (not acceptable): API is undocumented
  </p>
</blockquote>

<h3>Tests</h3>

<p>
  Authors are strongly encouraged to include an automated test suite covering the core functionality
  of their software.
</p>

<blockquote>
  <p>
    Good: An automated test suite hooked up to an external service such as Travis-CI or similar<br />
    OK: Documented manual steps that can be followed to check the expected functionality of the
    software (e.g. a sample input file to assert behaviour)<br />
    Bad (not acceptable): No way for you the reviewer to check whether the software works
  </p>
</blockquote>

<h3>Community guidelines</h3>

<p>
  There should be clear guidelines for third-parties wishing to:
</p>

<ul>
  <li>Contribute to the software</li>
  <li>Report issues or problems with the software</li>
  <li>Seek support</li>
</ul>

<h3>Examples</h3>

<p>
  Include here some examples of well-documented software for people to review.
</p>

<h2>Functionality</h2>

<p>
  Reviewers are expected to install the software they are reviewing and to verify the core
  functionality of the software.
</p>

<h2>Other considerations</h2>

<h3>An important note about 'novel' software</h3>

<p>
  Submissions that implement solutions already solved in other software packages are accepted into
  JOSS provided that they meet the criteria listed above and cite prior similar work.
</p>

<h3>What happens if the software I'm reviewing doesn't meet the JOSS criteria?</h3>

<p>
  We ask that reviewers grade submissions in one of three categories: 1) Accept 2) Minor Revisions
  3) Major Revisions. Unlike some journals we do not reject outright submissions requiring major
  revisions - we're more than happy to give the author as long as they need to make these
  modifications/improvements.
</p>

<h3>What about submissions that rely upon proprietary languages/development environments?</h3>

<p>
  As outlined in our author guidelines, submissions that rely upon a proprietary/closed source
  language or development environment are acceptable provided that they meet the other submission
  requirements and that you, the reviewer, are able to install the software &amp; verify the
  functionality of the submission as required by our reviewer guidelines.
</p>

<p>
  If an open source or free variant of the programming language exists, feel free to encourage the
  submitting author to consider making their software compatible with the open source/free variant.
</p>
